// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class ClaimAccrued extends ethereum.Event {
  get params(): ClaimAccrued__Params {
    return new ClaimAccrued__Params(this);
  }
}

export class ClaimAccrued__Params {
  _event: ClaimAccrued;

  constructor(event: ClaimAccrued) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Claimed extends ethereum.Event {
  get params(): Claimed__Params {
    return new Claimed__Params(this);
  }
}

export class Claimed__Params {
  _event: Claimed;

  constructor(event: Claimed) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Finalized extends ethereum.Event {
  get params(): Finalized__Params {
    return new Finalized__Params(this);
  }
}

export class Finalized__Params {
  _event: Finalized;

  constructor(event: Finalized) {
    this._event = event;
  }

  get epoch(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Funded extends ethereum.Event {
  get params(): Funded__Params {
    return new Funded__Params(this);
  }
}

export class Funded__Params {
  _event: Funded;

  constructor(event: Funded) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get connectorBase(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Initialized1 extends ethereum.Event {
  get params(): Initialized1__Params {
    return new Initialized1__Params(this);
  }
}

export class Initialized1__Params {
  _event: Initialized1;

  constructor(event: Initialized1) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get otherNetworkAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenState(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Refunded extends ethereum.Event {
  get params(): Refunded__Params {
    return new Refunded__Params(this);
  }
}

export class Refunded__Params {
  _event: Refunded;

  constructor(event: Refunded) {
    this._event = event;
  }

  get receiver(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class StateApplied extends ethereum.Event {
  get params(): StateApplied__Params {
    return new StateApplied__Params(this);
  }
}

export class StateApplied__Params {
  _event: StateApplied;

  constructor(event: StateApplied) {
    this._event = event;
  }

  get state(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class StateApplied1 extends ethereum.Event {
  get params(): StateApplied1__Params {
    return new StateApplied1__Params(this);
  }
}

export class StateApplied1__Params {
  _event: StateApplied1;

  constructor(event: StateApplied1) {
    this._event = event;
  }

  get state(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class TokenConnectorBase extends ethereum.SmartContract {
  static bind(address: Address): TokenConnectorBase {
    return new TokenConnectorBase("TokenConnectorBase", address);
  }

  UPGRADE_INTERFACE_VERSION(): string {
    let result = super.call(
      "UPGRADE_INTERFACE_VERSION",
      "UPGRADE_INTERFACE_VERSION():(string)",
      [],
    );

    return result[0].toString();
  }

  try_UPGRADE_INTERFACE_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "UPGRADE_INTERFACE_VERSION",
      "UPGRADE_INTERFACE_VERSION():(string)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  epoch(): BigInt {
    let result = super.call("epoch", "epoch():(uint256)", []);

    return result[0].toBigInt();
  }

  try_epoch(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("epoch", "epoch():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feeToClaim(param0: Address): BigInt {
    let result = super.call("feeToClaim", "feeToClaim(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_feeToClaim(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("feeToClaim", "feeToClaim(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  finalize(epoch_to_finalize: BigInt): Bytes {
    let result = super.call("finalize", "finalize(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(epoch_to_finalize),
    ]);

    return result[0].toBytes();
  }

  try_finalize(epoch_to_finalize: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall("finalize", "finalize(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(epoch_to_finalize),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  finalizedState(): Address {
    let result = super.call("finalizedState", "finalizedState():(address)", []);

    return result[0].toAddress();
  }

  try_finalizedState(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "finalizedState",
      "finalizedState():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getContractDestination(): Address {
    let result = super.call(
      "getContractDestination",
      "getContractDestination():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_getContractDestination(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getContractDestination",
      "getContractDestination():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getContractSource(): Address {
    let result = super.call(
      "getContractSource",
      "getContractSource():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_getContractSource(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getContractSource",
      "getContractSource():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getFinalizedState(): Bytes {
    let result = super.call(
      "getFinalizedState",
      "getFinalizedState():(bytes)",
      [],
    );

    return result[0].toBytes();
  }

  try_getFinalizedState(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getFinalizedState",
      "getFinalizedState():(bytes)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  isStateEmpty(): boolean {
    let result = super.call("isStateEmpty", "isStateEmpty():(bool)", []);

    return result[0].toBoolean();
  }

  try_isStateEmpty(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isStateEmpty", "isStateEmpty():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  otherNetworkAddress(): Address {
    let result = super.call(
      "otherNetworkAddress",
      "otherNetworkAddress():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_otherNetworkAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "otherNetworkAddress",
      "otherNetworkAddress():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  state(): Address {
    let result = super.call("state", "state():(address)", []);

    return result[0].toAddress();
  }

  try_state(): ethereum.CallResult<Address> {
    let result = super.tryCall("state", "state():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  toClaim(param0: Address): BigInt {
    let result = super.call("toClaim", "toClaim(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_toClaim(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("toClaim", "toClaim(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class TokenConnectorBase_initCall extends ethereum.Call {
  get inputs(): TokenConnectorBase_initCall__Inputs {
    return new TokenConnectorBase_initCall__Inputs(this);
  }

  get outputs(): TokenConnectorBase_initCall__Outputs {
    return new TokenConnectorBase_initCall__Outputs(this);
  }
}

export class TokenConnectorBase_initCall__Inputs {
  _call: TokenConnectorBase_initCall;

  constructor(call: TokenConnectorBase_initCall) {
    this._call = call;
  }

  get bridge(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get token_on_other_network(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class TokenConnectorBase_initCall__Outputs {
  _call: TokenConnectorBase_initCall;

  constructor(call: TokenConnectorBase_initCall) {
    this._call = call;
  }
}

export class __BridgeConnectorBase_initCall extends ethereum.Call {
  get inputs(): __BridgeConnectorBase_initCall__Inputs {
    return new __BridgeConnectorBase_initCall__Inputs(this);
  }

  get outputs(): __BridgeConnectorBase_initCall__Outputs {
    return new __BridgeConnectorBase_initCall__Outputs(this);
  }
}

export class __BridgeConnectorBase_initCall__Inputs {
  _call: __BridgeConnectorBase_initCall;

  constructor(call: __BridgeConnectorBase_initCall) {
    this._call = call;
  }

  get bridge(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class __BridgeConnectorBase_initCall__Outputs {
  _call: __BridgeConnectorBase_initCall;

  constructor(call: __BridgeConnectorBase_initCall) {
    this._call = call;
  }
}

export class ApplyStateWithRefundCall extends ethereum.Call {
  get inputs(): ApplyStateWithRefundCall__Inputs {
    return new ApplyStateWithRefundCall__Inputs(this);
  }

  get outputs(): ApplyStateWithRefundCall__Outputs {
    return new ApplyStateWithRefundCall__Outputs(this);
  }
}

export class ApplyStateWithRefundCall__Inputs {
  _call: ApplyStateWithRefundCall;

  constructor(call: ApplyStateWithRefundCall) {
    this._call = call;
  }

  get _state(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get refund_receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get common_part(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ApplyStateWithRefundCall__Outputs {
  _call: ApplyStateWithRefundCall;

  constructor(call: ApplyStateWithRefundCall) {
    this._call = call;
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class FinalizeCall extends ethereum.Call {
  get inputs(): FinalizeCall__Inputs {
    return new FinalizeCall__Inputs(this);
  }

  get outputs(): FinalizeCall__Outputs {
    return new FinalizeCall__Outputs(this);
  }
}

export class FinalizeCall__Inputs {
  _call: FinalizeCall;

  constructor(call: FinalizeCall) {
    this._call = call;
  }

  get epoch_to_finalize(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class FinalizeCall__Outputs {
  _call: FinalizeCall;

  constructor(call: FinalizeCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RefundCall extends ethereum.Call {
  get inputs(): RefundCall__Inputs {
    return new RefundCall__Inputs(this);
  }

  get outputs(): RefundCall__Outputs {
    return new RefundCall__Outputs(this);
  }
}

export class RefundCall__Inputs {
  _call: RefundCall;

  constructor(call: RefundCall) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RefundCall__Outputs {
  _call: RefundCall;

  constructor(call: RefundCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}
