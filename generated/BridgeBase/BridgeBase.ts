// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class ConnectorRegistered extends ethereum.Event {
  get params(): ConnectorRegistered__Params {
    return new ConnectorRegistered__Params(this);
  }
}

export class ConnectorRegistered__Params {
  _event: ConnectorRegistered;

  constructor(event: ConnectorRegistered) {
    this._event = event;
  }

  get connector(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Finalized extends ethereum.Event {
  get params(): Finalized__Params {
    return new Finalized__Params(this);
  }
}

export class Finalized__Params {
  _event: Finalized;

  constructor(event: Finalized) {
    this._event = event;
  }

  get epoch(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get bridgeRoot(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class StateApplied extends ethereum.Event {
  get params(): StateApplied__Params {
    return new StateApplied__Params(this);
  }
}

export class StateApplied__Params {
  _event: StateApplied;

  constructor(event: StateApplied) {
    this._event = event;
  }

  get state(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get connector(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get refund(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class BridgeBase__getStateWithProofResultRetStruct extends ethereum.Tuple {
  get state(): BridgeBase__getStateWithProofResultRetStateStruct {
    return changetype<BridgeBase__getStateWithProofResultRetStateStruct>(
      this[0].toTuple(),
    );
  }

  get state_hashes(): Array<BridgeBase__getStateWithProofResultRetState_hashesStruct> {
    return this[1].toTupleArray<BridgeBase__getStateWithProofResultRetState_hashesStruct>();
  }
}

export class BridgeBase__getStateWithProofResultRetStateStruct extends ethereum.Tuple {
  get epoch(): BigInt {
    return this[0].toBigInt();
  }

  get states(): Array<BridgeBase__getStateWithProofResultRetStateStatesStruct> {
    return this[1].toTupleArray<BridgeBase__getStateWithProofResultRetStateStatesStruct>();
  }
}

export class BridgeBase__getStateWithProofResultRetStateStatesStruct extends ethereum.Tuple {
  get contractAddress(): Address {
    return this[0].toAddress();
  }

  get state(): Bytes {
    return this[1].toBytes();
  }
}

export class BridgeBase__getStateWithProofResultRetState_hashesStruct extends ethereum.Tuple {
  get contractAddress(): Address {
    return this[0].toAddress();
  }

  get stateHash(): Bytes {
    return this[1].toBytes();
  }
}

export class BridgeBase extends ethereum.SmartContract {
  static bind(address: Address): BridgeBase {
    return new BridgeBase("BridgeBase", address);
  }

  UPGRADE_INTERFACE_VERSION(): string {
    let result = super.call(
      "UPGRADE_INTERFACE_VERSION",
      "UPGRADE_INTERFACE_VERSION():(string)",
      [],
    );

    return result[0].toString();
  }

  try_UPGRADE_INTERFACE_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "UPGRADE_INTERFACE_VERSION",
      "UPGRADE_INTERFACE_VERSION():(string)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  appliedEpoch(): BigInt {
    let result = super.call("appliedEpoch", "appliedEpoch():(uint256)", []);

    return result[0].toBigInt();
  }

  try_appliedEpoch(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("appliedEpoch", "appliedEpoch():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bridgeRoot(): Bytes {
    let result = super.call("bridgeRoot", "bridgeRoot():(bytes32)", []);

    return result[0].toBytes();
  }

  try_bridgeRoot(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("bridgeRoot", "bridgeRoot():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  connectors(param0: Address): Address {
    let result = super.call("connectors", "connectors(address):(address)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toAddress();
  }

  try_connectors(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("connectors", "connectors(address):(address)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  finalizationInterval(): BigInt {
    let result = super.call(
      "finalizationInterval",
      "finalizationInterval():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_finalizationInterval(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "finalizationInterval",
      "finalizationInterval():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  finalizedEpoch(): BigInt {
    let result = super.call("finalizedEpoch", "finalizedEpoch():(uint256)", []);

    return result[0].toBigInt();
  }

  try_finalizedEpoch(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "finalizedEpoch",
      "finalizedEpoch():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBridgeRoot(): Bytes {
    let result = super.call("getBridgeRoot", "getBridgeRoot():(bytes32)", []);

    return result[0].toBytes();
  }

  try_getBridgeRoot(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getBridgeRoot",
      "getBridgeRoot():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getStateWithProof(): BridgeBase__getStateWithProofResultRetStruct {
    let result = super.call(
      "getStateWithProof",
      "getStateWithProof():(((uint256,(address,bytes)[]),(address,bytes32)[]))",
      [],
    );

    return changetype<BridgeBase__getStateWithProofResultRetStruct>(
      result[0].toTuple(),
    );
  }

  try_getStateWithProof(): ethereum.CallResult<BridgeBase__getStateWithProofResultRetStruct> {
    let result = super.tryCall(
      "getStateWithProof",
      "getStateWithProof():(((uint256,(address,bytes)[]),(address,bytes32)[]))",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<BridgeBase__getStateWithProofResultRetStruct>(
        value[0].toTuple(),
      ),
    );
  }

  lastFinalizedBlock(): BigInt {
    let result = super.call(
      "lastFinalizedBlock",
      "lastFinalizedBlock():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_lastFinalizedBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastFinalizedBlock",
      "lastFinalizedBlock():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lightClient(): Address {
    let result = super.call("lightClient", "lightClient():(address)", []);

    return result[0].toAddress();
  }

  try_lightClient(): ethereum.CallResult<Address> {
    let result = super.tryCall("lightClient", "lightClient():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  localAddress(param0: Address): Address {
    let result = super.call("localAddress", "localAddress(address):(address)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toAddress();
  }

  try_localAddress(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "localAddress",
      "localAddress(address):(address)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  registeredTokens(): Array<Address> {
    let result = super.call(
      "registeredTokens",
      "registeredTokens():(address[])",
      [],
    );

    return result[0].toAddressArray();
  }

  try_registeredTokens(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "registeredTokens",
      "registeredTokens():(address[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  shouldFinalizeEpoch(): boolean {
    let result = super.call(
      "shouldFinalizeEpoch",
      "shouldFinalizeEpoch():(bool)",
      [],
    );

    return result[0].toBoolean();
  }

  try_shouldFinalizeEpoch(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "shouldFinalizeEpoch",
      "shouldFinalizeEpoch():(bool)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  tokenAddresses(param0: BigInt): Address {
    let result = super.call(
      "tokenAddresses",
      "tokenAddresses(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toAddress();
  }

  try_tokenAddresses(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokenAddresses",
      "tokenAddresses(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ApplyStateCall extends ethereum.Call {
  get inputs(): ApplyStateCall__Inputs {
    return new ApplyStateCall__Inputs(this);
  }

  get outputs(): ApplyStateCall__Outputs {
    return new ApplyStateCall__Outputs(this);
  }
}

export class ApplyStateCall__Inputs {
  _call: ApplyStateCall;

  constructor(call: ApplyStateCall) {
    this._call = call;
  }

  get state_with_proof(): ApplyStateCallState_with_proofStruct {
    return changetype<ApplyStateCallState_with_proofStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }
}

export class ApplyStateCall__Outputs {
  _call: ApplyStateCall;

  constructor(call: ApplyStateCall) {
    this._call = call;
  }
}

export class ApplyStateCallState_with_proofStruct extends ethereum.Tuple {
  get state(): ApplyStateCallState_with_proofStateStruct {
    return changetype<ApplyStateCallState_with_proofStateStruct>(
      this[0].toTuple(),
    );
  }

  get state_hashes(): Array<ApplyStateCallState_with_proofState_hashesStruct> {
    return this[1].toTupleArray<ApplyStateCallState_with_proofState_hashesStruct>();
  }
}

export class ApplyStateCallState_with_proofStateStruct extends ethereum.Tuple {
  get epoch(): BigInt {
    return this[0].toBigInt();
  }

  get states(): Array<ApplyStateCallState_with_proofStateStatesStruct> {
    return this[1].toTupleArray<ApplyStateCallState_with_proofStateStatesStruct>();
  }
}

export class ApplyStateCallState_with_proofStateStatesStruct extends ethereum.Tuple {
  get contractAddress(): Address {
    return this[0].toAddress();
  }

  get state(): Bytes {
    return this[1].toBytes();
  }
}

export class ApplyStateCallState_with_proofState_hashesStruct extends ethereum.Tuple {
  get contractAddress(): Address {
    return this[0].toAddress();
  }

  get stateHash(): Bytes {
    return this[1].toBytes();
  }
}

export class FinalizeEpochCall extends ethereum.Call {
  get inputs(): FinalizeEpochCall__Inputs {
    return new FinalizeEpochCall__Inputs(this);
  }

  get outputs(): FinalizeEpochCall__Outputs {
    return new FinalizeEpochCall__Outputs(this);
  }
}

export class FinalizeEpochCall__Inputs {
  _call: FinalizeEpochCall;

  constructor(call: FinalizeEpochCall) {
    this._call = call;
  }
}

export class FinalizeEpochCall__Outputs {
  _call: FinalizeEpochCall;

  constructor(call: FinalizeEpochCall) {
    this._call = call;
  }
}

export class RegisterContractCall extends ethereum.Call {
  get inputs(): RegisterContractCall__Inputs {
    return new RegisterContractCall__Inputs(this);
  }

  get outputs(): RegisterContractCall__Outputs {
    return new RegisterContractCall__Outputs(this);
  }
}

export class RegisterContractCall__Inputs {
  _call: RegisterContractCall;

  constructor(call: RegisterContractCall) {
    this._call = call;
  }

  get connector(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RegisterContractCall__Outputs {
  _call: RegisterContractCall;

  constructor(call: RegisterContractCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetFinalizationIntervalCall extends ethereum.Call {
  get inputs(): SetFinalizationIntervalCall__Inputs {
    return new SetFinalizationIntervalCall__Inputs(this);
  }

  get outputs(): SetFinalizationIntervalCall__Outputs {
    return new SetFinalizationIntervalCall__Outputs(this);
  }
}

export class SetFinalizationIntervalCall__Inputs {
  _call: SetFinalizationIntervalCall;

  constructor(call: SetFinalizationIntervalCall) {
    this._call = call;
  }

  get _finalizationInterval(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetFinalizationIntervalCall__Outputs {
  _call: SetFinalizationIntervalCall;

  constructor(call: SetFinalizationIntervalCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}
